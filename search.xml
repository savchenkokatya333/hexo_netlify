<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>写在诞生之初</title>
      <link href="/2018/12/06/%E5%86%99%E5%9C%A8%E8%AF%9E%E7%94%9F%E4%B9%8B%E5%88%9D/"/>
      <url>/2018/12/06/%E5%86%99%E5%9C%A8%E8%AF%9E%E7%94%9F%E4%B9%8B%E5%88%9D/</url>
      
        <content type="html"><![CDATA[<h3 id="lalala"><a href="#lalala" class="headerlink" title="lalala"></a>lalala</h3>]]></content>
      
      
      <categories>
          
          <category> 瞎bb而已 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>LeetCode-053-Maximum Subarray</title>
      <link href="/2018/12/04/LeetCode-053-Maximum%20Subarray/"/>
      <url>/2018/12/04/LeetCode-053-Maximum%20Subarray/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="noopener">题目链接</a></p><p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [4,-1,2,1] has the largest sum = 6.</span><br></pre></td></tr></table></figure><p>本题是一个求最大子序列和的问题，虽标注为 easy 难度，可是真不简单啊，上网一搜才发现是个经典题。</p><a id="more"></a><hr><h3 id="思路分析："><a href="#思路分析：" class="headerlink" title="思路分析："></a>思路分析：</h3><ul><li><p>暴力方法，我好像也只能想出这种思考容量小的方法了，哎。三重循环，想想就可怕。</p><p>第一层：维护一个窗口的大小，从 0 到数组的长度；</p><p>第二层：确定窗口的起始位置，即从 0 到数组的长度-窗口大小；</p><p>第三层：遍历窗口内的元素并相加，判断是否为最大和。</p></li><li><p>Kadane算法思想（通俗版）:如果从头遍历整个列表，那么每个元素就只有 2 个选择：</p><p>​    1.加入前面的子序列</p><p>​    2.自己另起炉灶，成为另一个子序列的头元素</p><p>那么它将如何选择呢？这时候就要做一个判断：若我加入后，咱们序列的总和比我还小，那我还加入你们干嘛，拖我后退嘛，我要自己另起一个子序列。而若我加入后，咱们序列的总和比我大了，那还说什么呢？赶紧加入啊，大佬带带我。另外维护一个全局的最大和就行了。</p></li></ul><p>[注]：看网上很多说这里的第二种思路就是动态规划（动态规划原来学过，但现在仅存的映像是见过这 4 个字，赶紧偷偷去查下），<strong>动态规划的核心思想就是记住已经求过的解</strong>，详细的可以看下面贴的链接。</p><hr><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight python"><figcaption><span>1.1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        wsize = <span class="number">0</span></span><br><span class="line">        maxSum = nums[<span class="number">0</span>]</span><br><span class="line">        length = len(nums)</span><br><span class="line">        temp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> wsize &lt; length:</span><br><span class="line">            <span class="keyword">for</span> start <span class="keyword">in</span> range(length - wsize):</span><br><span class="line">                <span class="keyword">for</span> value <span class="keyword">in</span> nums[start:start + wsize + <span class="number">1</span>]:</span><br><span class="line">                    temp += value</span><br><span class="line">                    maxSum = max(temp, maxSum)</span><br><span class="line">                temp = <span class="number">0</span></span><br><span class="line">            wsize += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> maxSum</span><br></pre></td></tr></table></figure><p><img src="http://m-markdown-image.oss-cn-beijing.aliyuncs.com/2018-12-04-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-12-04%2014.04.15.png" alt=""></p><p>果不其然超时了，我拿这里测试用例在自己电脑上也跑了大几秒，以后这种 3 重循环的代码还是别写了，太丢人</p><figure class="highlight python"><figcaption><span>2.1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        tempSum, maxSum = nums[<span class="number">0</span>], nums[<span class="number">0</span>]</span><br><span class="line">        length = len(nums)</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span><br><span class="line">            tempSum = max(value, value + tempSum)</span><br><span class="line">            maxSum = max(tempSum, maxSum)</span><br><span class="line">        <span class="keyword">return</span> maxSum</span><br></pre></td></tr></table></figure><p><img src="http://m-markdown-image.oss-cn-beijing.aliyuncs.com/2018-12-04-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-12-04%2017.47.48.png" alt=""></p><p>明显优雅了很多，也同样在电脑上跑了一下测试用例，嗖的一下就出来了，瞬间感觉我就是个小学生！我也要变强！充钱行吗？</p><hr><h3 id="推荐阅读："><a href="#推荐阅读：" class="headerlink" title="推荐阅读："></a>推荐阅读：</h3><ul><li><a href="https://en.wikipedia.org/wiki/Maximum_subarray_problem" target="_blank" rel="noopener">Maximum subarray problem</a></li><li><a href="https://blog.csdn.net/u013309870/article/details/75193592" target="_blank" rel="noopener">算法-动态规划 Dynamic Programming–从菜鸟到老鸟</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 最大子序列 </tag>
            
            <tag> 经典题 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode-066-Plus One</title>
      <link href="/2017/01/02/LeetCode-066-Plus%20One/"/>
      <url>/2017/01/02/LeetCode-066-Plus%20One/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/plus-one/" target="_blank" rel="noopener">题目链接</a></p><p>Given a <strong>non-empty</strong> array of digits representing a non-negative integer, plus one to the integer.<br>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.<br>You may assume the integer does not contain any leading zero, except the number 0 itself.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">Output: [1,2,4]</span><br><span class="line">Explanation: The array represents the integer 123.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [4,3,2,1]</span><br><span class="line">Output: [4,3,2,2]</span><br><span class="line">Explanation: The array represents the integer 4321.</span><br></pre></td></tr></table></figure><p>前面做过类似的题，难度比这大，可以看下面贴的链接，共写了 2 种实现，思路前面写过就不写了，这里就直接贴代码，相当于前面的一次回顾吧，温故而知新嘛。</p><a id="more"></a><hr><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plusOne</span><span class="params">(self, digits)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type digits: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        tempStr = <span class="string">''</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> digits:</span><br><span class="line">            tempStr += str(value)</span><br><span class="line">        tempNum = int(tempStr) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> str(tempNum):</span><br><span class="line">            res.append(int(value))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>这个是转换成字符串处理，总感觉有点无脑，我更喜欢下面的进位方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plusOne</span><span class="params">(self, digits)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type digits: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        digits.reverse()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> enumerate(digits):</span><br><span class="line">            <span class="keyword">if</span> item[<span class="number">1</span>]+flag == <span class="number">10</span>:</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                digits[item[<span class="number">0</span>]] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                digits[item[<span class="number">0</span>]]+=<span class="number">1</span></span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> digits[<span class="number">-1</span>] == <span class="number">0</span>:</span><br><span class="line">            digits.append(<span class="number">1</span>)</span><br><span class="line">        digits.reverse()</span><br><span class="line">        <span class="keyword">return</span> digits</span><br></pre></td></tr></table></figure><p>这里的进位其实很简单，因为只加 1 ，那么一旦进位不为 1 的话，就可以直接退出了，不会新产生进位了。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode-058-Length of Last Word</title>
      <link href="/2017/01/01/LeetCode-058-Length%20of%20Last%20Word/"/>
      <url>/2017/01/01/LeetCode-058-Length%20of%20Last%20Word/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/length-of-last-word/" target="_blank" rel="noopener">题目链接</a></p><p>Given a string <em>s</em> consists of upper/lower-case alphabets and empty space characters <code>&#39; &#39;</code>, return the length of last word in the string.</p><p>If the last word does not exist, return 0.</p><p><strong>Note:</strong> A word is defined as a character sequence consists of non-space characters only.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;Hello World&quot;</span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure><p>乍一看很简单，也确实简单，只不过给的栗子只有一个标准情况，而我考虑问题又不全面，所以并没有一次提交成功，注意如果是<code>&quot;a &quot;</code>，应该返回 1 而不是 0，<code>&quot;a  b  &quot;</code>也是返回 1 ，注意到这些情况后就不难了。</p><a id="more"></a><hr><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLastWord</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        s = s.rstrip()</span><br><span class="line">        <span class="keyword">if</span> s:</span><br><span class="line">            wordList = s.split(<span class="string">' '</span>)</span><br><span class="line">            print(wordList)</span><br><span class="line">            <span class="keyword">return</span> len(wordList[<span class="number">-1</span>]) <span class="keyword">if</span> wordList[<span class="number">-1</span>] <span class="keyword">else</span> len(wordList[<span class="number">-2</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="http://m-markdown-image.oss-cn-beijing.aliyuncs.com/2018-12-05-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-12-05%2009.42.31.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
